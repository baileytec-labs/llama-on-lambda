FROM --platform=linux/arm64 ubuntu:22.04
ARG CHAT_FORMAT="mistral-instruct"
ARG MODEL_FILE
ARG APIKEY
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && \
  apt-get install -y \
  g++ \
  wget \
  make \
  cmake \
  unzip \
  libcurl4-openssl-dev \
  python3 \
  python3-pip \
  python3-dev \
  git \
  jq \
  libclblast-dev \
  libopenblas-dev 
RUN rm -rf /var/lib/apt/lists/*

COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.7.0 /lambda-adapter /opt/extensions/lambda-adapter
#Anything higher than v0.7.0 seems to have problems resolving and breaks 
#COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.1 /lambda-adapter /opt/extensions/lambda-adapter

WORKDIR "/app"

ENV AWS_LWA_INVOKE_MODE=response_stream

RUN wget ${MODEL_FILE} -O modelfile.bin
RUN wget https://raw.githubusercontent.com/baileytec-labs/llama-on-lambda/main/llama_lambda/llama-cpp-server-container/requirements.txt -O requirements.txt
RUN wget https://raw.githubusercontent.com/baileytec-labs/llama-on-lambda/main/llama_lambda/llama-cpp-server-container/config.json -O config.json
RUN jq --arg apikey "$APIKEY" '.api_key = $apikey' config.json > config_updated.json && mv config_updated.json config.json
ENV PORT=5001
RUN pip3 install psutil
RUN pip3 install -r requirements.txt

#note that as of now it appears that the Lambda function is not allowing for the multiprocessing cpu count implementation of the universal deployment here. We'll have to use the old lambda table values. The config here will be manually set.
EXPOSE 5001
CMD [ "python3", "-m", "llama_cpp.server","--config_file","config.json","--verbose","False"]
